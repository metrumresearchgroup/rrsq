% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RSimpleQueue.R
\docType{class}
\name{RSimpleQueue}
\alias{RSimpleQueue}
\title{Create a new rsq server manager}
\description{
The Babylon generator creates a new 'Babylon'-object, which contains logic to interact
with a running bbq server from the babylon ecosystem.
}
\section{Initialization}{

A new rsq object is initialized with the new() method:

`rsq <- RSimpleQueue$new()`

and can optionally take some initialization arguments:

* `host` - the hostname the server is running on - defaults to 'http://localhost'
* `port` - port the server is listening on - defaults to 8999.
* `verbose` - whether internal status information should be displayed
* `mustWork` - on initialization, check and confirm a rsq server is listening on the host/port configuration set
}

\section{Methods}{

* `submit_job(...)` - check ?submit_models for arguments, the server is automatically set internally
* `get_jobs(status, STATUSES)` - get information about models that have been submitted
* `get_job(id)` - get information about a model
* `poll(.ids, until, timeout, interval, print, parse)` - poll a vector of models by ID name until completion
    * ids - vector of job ids
    * until - status criteria to poll against, default to COMPLETED or ERROR
    * timeout - length of time to poll before stopping
    * print - whether to print the status of all jobs each poll
}

\examples{
\dontrun{
rsq <- RSimpleQueue$new()
rsq$get_jobs()

# get all ids
bbq$get_jobs \%>\% map_dbl("ID")

# find all queued models
bbq$get_jobs(status = "QUEUED") \%>\% map_dbl("ID")

bbq$poll(1:5) # poll for models 1-5 to complete

# get all outputs for completed runs
rsq$get_jobs(status = "COMPLETED") \%>\% map_chr(~ .x$Result$Output)
}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RSimpleQueue$new()}}
\item \href{#method-ping}{\code{RSimpleQueue$ping()}}
\item \href{#method-get_version}{\code{RSimpleQueue$get_version()}}
\item \href{#method-submit_job}{\code{RSimpleQueue$submit_job()}}
\item \href{#method-get_jobs}{\code{RSimpleQueue$get_jobs()}}
\item \href{#method-get_job}{\code{RSimpleQueue$get_job()}}
\item \href{#method-cancel_job}{\code{RSimpleQueue$cancel_job()}}
\item \href{#method-clone}{\code{RSimpleQueue$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSimpleQueue$new(
  init = NULL,
  host = "http://localhost",
  port = 8950,
  verbose = TRUE,
  must_work = TRUE,
  lgr = NULL
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ping"></a>}}
\subsection{Method \code{ping()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSimpleQueue$ping()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_version"></a>}}
\subsection{Method \code{get_version()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSimpleQueue$get_version()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-submit_job"></a>}}
\subsection{Method \code{submit_job()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSimpleQueue$submit_job(
  user,
  context,
  rscript_path,
  work_dir = NULL,
  r_path = NULL,
  renv = NULL,
  .no_submit = FALSE,
  .parse = TRUE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_jobs"></a>}}
\subsection{Method \code{get_jobs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSimpleQueue$get_jobs(
  status = NULL,
  STATUSES = c("QUEUED", "RUNNING", "COMPLETED", "ERROR"),
  parse = TRUE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_job"></a>}}
\subsection{Method \code{get_job()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSimpleQueue$get_job(id, parse = TRUE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-cancel_job"></a>}}
\subsection{Method \code{cancel_job()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSimpleQueue$cancel_job(id, parse = TRUE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSimpleQueue$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
